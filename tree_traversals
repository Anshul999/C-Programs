#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node*  left;
    struct node*  right;
};

struct node* newnode(int data)
{
    struct node* node = (struct node*)malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;

    return(node);
}

void preorder(struct node* node)
{
    if(node == NULL)
    return;
    printf("%d",node->data);
    preorder(node->left);
    preorder(node->right);
}

void inorder(struct node* node)
{
    if(node == NULL)
    return;
    inorder(node->left);
    printf("%d ",node->data);
    inorder(node->right);
}

void postorder(struct node* node)
{
    if(node == NULL)
    return;
    preorder(node->left);
    preorder(node->right);
    printf("%d",node->data);
}

struct node* insert(struct node* node, int data)
{
    if(node == NULL)
       return newnode(data);

    if(data < node->data)
    {
        node->left = insert(node->left,data);
    }
    else if(data > node->data)
    {
        node->right = insert(node->right,data);
    }
    return node;
}

int main()
{
    /* Let us create following BST
              50
           /     \
          30      70
         /  \    /  \
       20   40  60   80 */
    struct node *node = NULL;
    node = insert(node, 50);
    insert(node, 30);
    insert(node, 20);
    insert(node, 40);
    insert(node, 70);
    insert(node, 60);
    insert(node, 80);

    // print inoder traversal of the BST
    inorder(node);

    return 0;
}
